#!/usr/bin/env python3
"""
Tests unitaires pour le serveur MCP Odoo Client Generator
"""

import asyncio
import sys
import os
import json
import tempfile
import shutil
from pathlib import Path
from unittest.mock import Mock, AsyncMock, patch

# Ajouter le chemin du serveur MCP (r√©pertoire parent)
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

try:
    from mcp_server import OdooClientMCPServer
    import mcp.types as types
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üí° Install MCP library: pip install mcp")
    sys.exit(1)


class TestMCPServer:
    """Classe de tests pour le serveur MCP"""
    
    def __init__(self):
        self.repo_path = Path(__file__).parent.parent.parent
        self.test_results = []
        
    def log_test(self, name: str, success: bool, message: str = ""):
        """Enregistre le r√©sultat d'un test"""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append({
            "name": name,
            "success": success,
            "message": message
        })
        print(f"{status} {name}: {message}")
        
    async def test_server_creation(self):
        """Test la cr√©ation du serveur MCP"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            self.log_test("Server Creation", True, "Serveur cr√©√© avec succ√®s")
            return server
        except Exception as e:
            self.log_test("Server Creation", False, f"Erreur: {e}")
            return None
    
    async def test_invalid_repo_path(self):
        """Test avec un chemin de repo invalide"""
        try:
            OdooClientMCPServer("/path/that/does/not/exist")
            self.log_test("Invalid Repo Path", False, "Devrait √©chouer avec un chemin invalide")
        except ValueError:
            self.log_test("Invalid Repo Path", True, "Erreur correctement lev√©e pour chemin invalide")
        except Exception as e:
            self.log_test("Invalid Repo Path", False, f"Erreur inattendue: {e}")
    
    async def test_tools_list(self):
        """Test la liste des outils disponibles"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # Tester que le serveur a bien √©t√© configur√© avec les handlers
            # Version actuelle avec delete_client (13 outils)
            expected_tools = [
                "create_client", "list_clients", "update_client", "add_module",
                "list_modules", "list_oca_modules", "client_status", "check_client",
                "update_requirements", "update_oca_repos", "build_docker_image",
                "backup_client", "delete_client"
            ]
            
            # V√©rifier que toutes les m√©thodes d'impl√©mentation existent
            missing_methods = []
            for tool in expected_tools:
                method_name = f"_" + tool
                if not hasattr(server, method_name):
                    missing_methods.append(method_name)
            
            if missing_methods:
                self.log_test("Tools List", False, f"M√©thodes manquantes: {missing_methods}")
            else:
                self.log_test("Tools List", True, f"Toutes les {len(expected_tools)} m√©thodes d'outils sont pr√©sentes")
                
        except Exception as e:
            self.log_test("Tools List", False, f"Erreur: {e}")
    
    async def test_create_client_schema(self):
        """Test le sch√©ma de l'outil create_client"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # V√©rifier que la m√©thode _create_client existe et accepte les bons param√®tres
            import inspect
            
            if not hasattr(server, '_create_client'):
                self.log_test("Create Client Schema", False, "M√©thode _create_client non trouv√©e")
                return
            
            # V√©rifier la signature de la m√©thode
            sig = inspect.signature(server._create_client)
            params = list(sig.parameters.keys())
            
            expected_params = ["name", "template", "version", "has_enterprise"]
            missing_params = [p for p in expected_params if p not in params]
            
            if missing_params:
                self.log_test("Create Client Schema", False, f"Param√®tres manquants: {missing_params}")
            else:
                # V√©rifier les valeurs par d√©faut
                template_param = sig.parameters.get("template")
                version_param = sig.parameters.get("version")
                enterprise_param = sig.parameters.get("has_enterprise")
                if (template_param and template_param.default == "basic" and
                    version_param and version_param.default == "18.0" and
                    enterprise_param and enterprise_param.default is False):
                    self.log_test("Create Client Schema", True, "M√©thode _create_client avec has_enterprise configur√©e")
                else:
                    self.log_test("Create Client Schema", False, "Valeurs par d√©faut incorrectes")
                    
        except Exception as e:
            self.log_test("Create Client Schema", False, f"Erreur: {e}")
    
    async def test_command_execution(self):
        """Test l'ex√©cution de commandes"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # Tester une commande simple
            result = server._run_command(["echo", "test"])
            
            if result["success"] and "test" in result["stdout"]:
                self.log_test("Command Execution", True, "Ex√©cution de commande fonctionnelle")
            else:
                self.log_test("Command Execution", False, f"R√©sultat inattendu: {result}")
                
        except Exception as e:
            self.log_test("Command Execution", False, f"Erreur: {e}")
    
    async def test_list_clients_mock(self):
        """Test de l'appel list_clients avec mock"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # Mock de la commande make list-clients
            with patch.object(server, '_run_command') as mock_run:
                mock_run.return_value = {
                    "success": True,
                    "stdout": "client1\nclient2\nclient3",
                    "stderr": ""
                }
                
                result = await server._list_clients()
                
                if len(result) == 1 and "client1" in result[0].text:
                    self.log_test("List Clients Mock", True, "Fonction list_clients fonctionne")
                else:
                    self.log_test("List Clients Mock", False, f"R√©sultat inattendu: {result}")
                    
        except Exception as e:
            self.log_test("List Clients Mock", False, f"Erreur: {e}")
    
    async def test_create_client_parameters(self):
        """Test des param√®tres de create_client"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # Mock de la commande de cr√©ation
            with patch.object(server, '_run_command') as mock_run:
                mock_run.return_value = {
                    "success": True,
                    "stdout": "Client created successfully",
                    "stderr": ""
                }
                
                # Test avec param√®tres par d√©faut
                result = await server._create_client("test_client")
                
                # V√©rifier que la commande appel√©e contient les bons param√®tres
                args_called = mock_run.call_args[0][0]
                
                # Doit contenir: script, name, version, template, has_enterprise(false)
                expected_elements = ["test_client", "18.0", "basic", "false"]
                all_present = all(elem in args_called for elem in expected_elements)
                
                if all_present:
                    self.log_test("Create Client Parameters", True, "Param√®tres par d√©faut transmis correctement")
                else:
                    self.log_test("Create Client Parameters", False, f"Param√®tres incorrects: {args_called}")
                    
                # Test avec param√®tres personnalis√©s
                mock_run.reset_mock()
                await server._create_client("test_client", "ecommerce", "17.0")
                args_called = mock_run.call_args[0][0]
                
                expected_elements = ["test_client", "17.0", "ecommerce", "false"]
                all_present = all(elem in args_called for elem in expected_elements)
                
                if all_present:
                    self.log_test("Create Client Parameters (Custom)", True, "Param√®tres personnalis√©s transmis correctement")
                else:
                    self.log_test("Create Client Parameters (Custom)", False, f"Param√®tres incorrects: {args_called}")
                
                # Test avec Enterprise
                mock_run.reset_mock()
                await server._create_client("test_enterprise", "basic", "18.0", True)
                args_called = mock_run.call_args[0][0]
                
                expected_elements = ["test_enterprise", "18.0", "basic", "true"]
                all_present = all(elem in args_called for elem in expected_elements)
                
                if all_present:
                    self.log_test("Create Client Parameters (Enterprise)", True, "Param√®tre has_enterprise=True transmis correctement")
                else:
                    self.log_test("Create Client Parameters (Enterprise)", False, f"Param√®tres Enterprise incorrects: {args_called}")
                    
        except Exception as e:
            self.log_test("Create Client Parameters", False, f"Erreur: {e}")
    
    async def test_tool_calls_mapping(self):
        """Test que tous les outils ont bien un mapping dans handle_call_tool"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # Liste des outils attendus
            expected_tools = [
                "create_client", "list_clients", "update_client", "add_module",
                "list_modules", "list_oca_modules", "client_status", "check_client",
                "update_requirements", "update_oca_repos", "build_docker_image",
                "backup_client", "delete_client"
            ]
            
            # V√©rifier que chaque outil a bien une m√©thode correspondante
            missing_mappings = []
            
            # Test avec des mocks pour √©viter les appels r√©els
            with patch.object(server, '_run_command') as mock_run:
                mock_run.return_value = {"success": True, "stdout": "test", "stderr": ""}
                
                for tool_name in expected_tools:
                    method_name = f"_{tool_name}"
                    if not hasattr(server, method_name):
                        missing_mappings.append(f"{tool_name} -> {method_name}")
            
            if missing_mappings:
                self.log_test("Tool Calls Mapping", False, f"Mappings manquants: {missing_mappings}")
            else:
                self.log_test("Tool Calls Mapping", True, f"Tous les {len(expected_tools)} outils ont leur mapping")
                
        except Exception as e:
            self.log_test("Tool Calls Mapping", False, f"Erreur: {e}")
    
    async def test_delete_client_workflow(self):
        """Test du workflow de suppression de client avec confirmation"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # Test avec un client inexistant
            result = await server._delete_client("client_inexistant", False)
            
            if len(result) == 1 and "not found" in result[0].text:
                self.log_test("Delete Client (Not Found)", True, "Gestion client inexistant correcte")
            else:
                self.log_test("Delete Client (Not Found)", False, f"R√©ponse inattendue: {result}")
            
            # Test des param√®tres et de la signature de la m√©thode
            import inspect
            sig = inspect.signature(server._delete_client)
            params = list(sig.parameters.keys())
            
            expected_params = ["client", "confirmed"]
            if all(p in params for p in expected_params):
                self.log_test("Delete Client (Signature)", True, "Signature _delete_client correcte")
            else:
                self.log_test("Delete Client (Signature)", False, f"Param√®tres manquants: {set(expected_params) - set(params)}")
            
            # Test avec mock pour v√©rifier les appels de commande
            with patch.object(server, '_run_command') as mock_run:
                mock_run.return_value = {
                    "success": True,
                    "stdout": "Client deleted successfully",
                    "stderr": ""
                }
                
                # Mock du r√©pertoire client pour qu'il existe
                with patch('pathlib.Path.exists') as mock_exists:
                    mock_exists.return_value = True
                    
                    # Test avec confirmation
                    result = await server._delete_client("test_client", True)
                    
                    # V√©rifier que la commande make delete-client a √©t√© appel√©e
                    if mock_run.called:
                        call_args = mock_run.call_args[0][0]
                        if ("make" in call_args and "delete-client" in call_args):
                            self.log_test("Delete Client (Command)", True, "Commande de suppression appel√©e correctement")
                        else:
                            self.log_test("Delete Client (Command)", False, f"Commande incorrecte: {call_args}")
                    else:
                        self.log_test("Delete Client (Command)", False, "Commande de suppression non appel√©e")
            
            # Test de gestion d'erreur
            with patch.object(server, '_run_command') as mock_run:
                mock_run.return_value = {
                    "success": False,
                    "stdout": "",
                    "stderr": "Permission denied"
                }
                
                with patch('pathlib.Path.exists') as mock_exists:
                    mock_exists.return_value = True
                    
                    result = await server._delete_client("test_client", True)
                    
                    if (len(result) == 1 and 
                        "permission issues" in result[0].text and 
                        "sudo" in result[0].text):
                        self.log_test("Delete Client (Permissions)", True, "Gestion erreurs de permissions OK")
                    else:
                        self.log_test("Delete Client (Permissions)", False, "Gestion erreurs de permissions manquante")
                        
        except Exception as e:
            self.log_test("Delete Client Workflow", False, f"Erreur: {e}")
    
    async def test_performance(self):
        """Test de performance du serveur MCP"""
        try:
            import time
            
            # Test la vitesse de cr√©ation du serveur
            start_time = time.time()
            server = OdooClientMCPServer(str(self.repo_path))
            creation_time = time.time() - start_time
            
            if creation_time < 2.0:  # Moins de 2 secondes
                self.log_test("Performance Creation", True, f"Serveur cr√©√© en {creation_time:.3f}s")
            else:
                self.log_test("Performance Creation", False, f"Cr√©ation trop lente: {creation_time:.3f}s")
            
            # Test la vitesse d'ex√©cution d'une commande simple
            with patch.object(server, '_run_command') as mock_run:
                mock_run.return_value = {"success": True, "stdout": "test", "stderr": ""}
                
                start_time = time.time()
                await server._list_clients()
                call_time = time.time() - start_time
                
                if call_time < 0.1:  # Moins de 100ms
                    self.log_test("Performance Call", True, f"Appel ex√©cut√© en {call_time:.3f}s")
                else:
                    self.log_test("Performance Call", False, f"Appel trop lent: {call_time:.3f}s")
                    
        except Exception as e:
            self.log_test("Performance", False, f"Erreur: {e}")
    
    async def test_error_handling(self):
        """Test la gestion d'erreurs"""
        try:
            server = OdooClientMCPServer(str(self.repo_path))
            
            # Tester une commande qui √©choue
            result = server._run_command(["false"])  # Commande qui retourne toujours 1
            
            if not result["success"] and result["return_code"] == 1:
                self.log_test("Error Handling", True, "Gestion d'erreur fonctionnelle")
            else:
                self.log_test("Error Handling", False, f"Gestion d'erreur d√©faillante: {result}")
                
        except Exception as e:
            self.log_test("Error Handling", False, f"Erreur: {e}")
    
    async def run_all_tests(self):
        """Lance tous les tests"""
        print("üß™ D√©marrage des tests unitaires du serveur MCP...")
        print(f"üìÅ R√©pertoire de test: {self.repo_path}")
        print()
        
        # Liste des tests √† ex√©cuter
        tests = [
            self.test_server_creation,
            self.test_invalid_repo_path,
            self.test_tools_list,
            self.test_create_client_schema,
            self.test_command_execution,
            self.test_list_clients_mock,
            self.test_create_client_parameters,
            self.test_tool_calls_mapping,
            self.test_delete_client_workflow,
            self.test_performance,
            self.test_error_handling
        ]
        
        # Ex√©cuter chaque test
        for test in tests:
            try:
                await test()
            except Exception as e:
                self.log_test(test.__name__, False, f"Test failed: {e}")
        
        # R√©sum√© des r√©sultats
        print()
        print("üìä R√©sum√© des tests:")
        
        passed = sum(1 for r in self.test_results if r["success"])
        total = len(self.test_results)
        
        print(f"‚úÖ Tests r√©ussis: {passed}/{total}")
        
        if passed < total:
            print("‚ùå Tests √©chou√©s:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"  - {result['name']}: {result['message']}")
        
        print()
        
        if passed == total:
            print("üéâ Tous les tests sont pass√©s avec succ√®s!")
            return True
        else:
            print("‚ö†Ô∏è Certains tests ont √©chou√©.")
            return False


async def main():
    """Point d'entr√©e principal"""
    tester = TestMCPServer()
    success = await tester.run_all_tests()
    return 0 if success else 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã Tests interrompus par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        sys.exit(1)